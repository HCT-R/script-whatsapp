const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const multer = require('multer');
const fs = require('fs');
const WhatsAppClient = require('./src/core/whatsapp-client');
const logger = require('./src/utils/logger');

const app = express();
const PORT = process.env.PORT || 3000;

// Multer configuration for file uploads
const storage = multer.diskStorage({
    destination: function (req, file, cb) {
        const uploadDir = './uploads';
        if (!fs.existsSync(uploadDir)) {
            fs.mkdirSync(uploadDir);
        }
        cb(null, uploadDir);
    },
    filename: function (req, file, cb) {
        cb(null, Date.now() + '-' + file.originalname);
    }
});

// Upload for phone numbers (restricted types)
const uploadNumbers = multer({ 
    storage: storage,
    fileFilter: function (req, file, cb) {
        const allowedTypes = [
            'text/plain',
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/msword',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet'
        ];
        
        if (allowedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞. –†–∞–∑—Ä–µ—à–µ–Ω—ã: .txt, .doc, .docx, .xls, .xlsx'));
        }
    }
});

// Upload for attachments (all supported types)
const uploadAttachment = multer({ 
    storage: storage,
    fileFilter: function (req, file, cb) {
        const supportedTypes = [
            'image/jpeg', 'image/png', 'image/gif', 'image/webp',
            'video/mp4', 'video/avi', 'video/mov', 'video/wmv',
            'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/m4a',
            'application/pdf', 'application/msword', 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'text/plain'
        ];
        
        if (supportedTypes.includes(file.mimetype)) {
            cb(null, true);
        } else {
            cb(new Error('–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è WhatsApp'));
        }
    }
});

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('public'));

// WhatsApp client instance
let whatsappClient = null;
let isInitialized = false;
let isMassSending = false;
let isTestSending = false;

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'public', 'index.html'));
});

// Initialize WhatsApp client
app.post('/api/init', async (req, res) => {
    try {
        if (isInitialized) {
            return res.json({ success: true, message: 'WhatsApp —É–∂–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }

        whatsappClient = new WhatsAppClient();
        
        // Set up event handlers
        whatsappClient.client.on('qr', (qr) => {
            logger.info('QR Code received');
            whatsappClient.qrCode = qr;
            isInitialized = true;
            
            // –í—ã–≤–æ–¥–∏–º QR –∫–æ–¥ –≤ —Ç–µ—Ä–º–∏–Ω–∞–ª
            console.log('\n' + '='.repeat(50));
            console.log('üì± QR –ö–û–î –î–õ–Ø –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø WHATSAPP');
            console.log('='.repeat(50));
            console.log('–û—Ç—Å–∫–∞–Ω–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç QR –∫–æ–¥ –≤ WhatsApp:');
            console.log('');
            
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º qrcode-terminal –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è QR –∫–æ–¥–∞
            try {
                const qrcode = require('qrcode-terminal');
                qrcode.generate(qr, { small: true });
            } catch (error) {
                console.log('QR –∫–æ–¥ (—Ç–µ–∫—Å—Ç):', qr);
                console.log('–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ qrcode-terminal: npm install qrcode-terminal');
            }
            
            console.log('');
            console.log('='.repeat(50));
            console.log('–ü–æ—Å–ª–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è QR –∫–æ–¥–∞, –∫–ª–∏–µ–Ω—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–¥–∫–ª—é—á–∏—Ç—Å—è');
            console.log('='.repeat(50) + '\n');
        });

        whatsappClient.client.on('ready', () => {
            logger.info('WhatsApp client is ready');
            whatsappClient.isReady = true;
        });

        whatsappClient.client.on('authenticated', () => {
            logger.info('WhatsApp client authenticated');
        });

        whatsappClient.client.on('auth_failure', (msg) => {
            logger.error('WhatsApp authentication failed:', msg);
            isInitialized = false;
        });

        whatsappClient.client.on('disconnected', (reason) => {
            logger.warn('WhatsApp client disconnected:', reason);
            whatsappClient.isReady = false;
            isInitialized = false;
        });

        const initialized = await whatsappClient.initialize();
        
        if (initialized) {
            isInitialized = true;
            res.json({ success: true, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω. –û–∂–∏–¥–∞–Ω–∏–µ QR –∫–æ–¥–∞...' });
        } else {
            res.json({ success: false, message: '–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ WhatsApp' });
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞: ' + error.message });
    }
});

// Get QR code
app.get('/api/qr', (req, res) => {
    if (!whatsappClient || !whatsappClient.qrCode) {
        return res.json({ success: false, message: 'QR –∫–æ–¥ –Ω–µ –≥–æ—Ç–æ–≤' });
    }
    res.json({ success: true, qrCode: whatsappClient.qrCode });
});

// Upload file with phone numbers
app.post('/api/upload-numbers', uploadNumbers.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.json({ success: false, message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        const filePath = req.file.path;
        const fileType = req.file.mimetype;
        let phoneNumbers = [];

        try {
            if (fileType === 'text/plain') {
                // Read .txt file
                const content = fs.readFileSync(filePath, 'utf8');
                phoneNumbers = content.split('\n')
                    .map(line => line.trim())
                    .filter(line => line && !line.startsWith('#') && line.length > 0);
            } else if (fileType.includes('excel') || fileType.includes('spreadsheet')) {
                // Read Excel file
                const XLSX = require('xlsx');
                const workbook = XLSX.readFile(filePath);
                const sheetName = workbook.SheetNames[0];
                const worksheet = workbook.Sheets[sheetName];
                const data = XLSX.utils.sheet_to_json(worksheet);
                
                // Extract phone numbers from first column
                phoneNumbers = data.map(row => {
                    const firstValue = Object.values(row)[0];
                    return firstValue ? firstValue.toString().trim() : '';
                }).filter(phone => phone && phone.length > 0);
            } else if (fileType.includes('word')) {
                // Use mammoth to extract text from Word documents
                try {
                    const mammoth = require('mammoth');
                    const result = await mammoth.extractRawText({ path: filePath });
                    const content = result.value;
                    
                    // Extract phone numbers using regex
                    const phoneRegex = /(\+?7|8)?[\s\-\(]?(\d{3})[\s\-\)]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})/g;
                    const matches = content.match(phoneRegex);
                    phoneNumbers = matches ? matches.map(match => match.replace(/\D/g, '')) : [];
                } catch (mammothError) {
                    logger.error('–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Word –¥–æ–∫—É–º–µ–Ω—Ç–∞:', mammothError);
                    // Fallback to regex on raw file
                    const content = fs.readFileSync(filePath, 'utf8');
                    const phoneRegex = /(\+?7|8)?[\s\-\(]?(\d{3})[\s\-\)]?(\d{3})[\s\-]?(\d{2})[\s\-]?(\d{2})/g;
                    const matches = content.match(phoneRegex);
                    phoneNumbers = matches ? matches.map(match => match.replace(/\D/g, '')) : [];
                }
            }

            // Clean up uploaded file
            fs.unlinkSync(filePath);

            if (phoneNumbers.length === 0) {
                return res.json({ success: false, message: '–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞' });
            }

            res.json({ 
                success: true, 
                message: `–ò–∑–≤–ª–µ—á–µ–Ω–æ ${phoneNumbers.length} –Ω–æ–º–µ—Ä–æ–≤ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–≤`,
                phoneNumbers: phoneNumbers
            });

        } catch (parseError) {
            // Clean up file on error
            if (fs.existsSync(filePath)) {
                fs.unlinkSync(filePath);
            }
            throw parseError;
        }

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message });
    }
});

// Check WhatsApp status
app.get('/api/status', (req, res) => {
    if (!whatsappClient) {
        return res.json({ 
            initialized: false, 
            ready: false, 
            message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' 
        });
    }

    res.json({
        initialized: isInitialized,
        ready: whatsappClient.isReady,
        message: whatsappClient.isReady ? '–ì–æ—Ç–æ–≤ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ' : '–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏'
    });
});

// Send test message to specific number
app.post('/api/send-test', async (req, res) => {
    try {
        const { phoneNumber, message, attachmentPath } = req.body;
        
        if (!isInitialized || !whatsappClient) {
            return res.json({ success: false, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }

        if (!whatsappClient.isReady) {
            return res.json({ success: false, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤' });
        }

        if (!phoneNumber) {
            return res.json({ success: false, message: '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ —É–∫–∞–∑–∞–Ω' });
        }

        const testMessage = message || 'üéâ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –≠—Ç–æ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏.';
        
        let success;
        if (attachmentPath && attachmentPath.trim()) {
            logger.info(`–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º: ${attachmentPath}`);
            success = await whatsappClient.sendMessage(phoneNumber, testMessage, attachmentPath);
        } else {
            logger.info('–û—Ç–ø—Ä–∞–≤–ª—è—é —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è');
            success = await whatsappClient.sendMessage(phoneNumber, testMessage);
        }
        
        if (success) {
            res.json({ success: true, message: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ ${phoneNumber}` });
        } else {
            res.json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è' });
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞: ' + error.message });
    }
});

// Send mass message
app.post('/api/send-mass', async (req, res) => {
    try {
        const { phoneNumbers, message, delay, maxMessages, attachmentPath } = req.body;
        
        if (!isInitialized || !whatsappClient) {
            return res.json({ success: false, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }

        if (!whatsappClient.isReady) {
            return res.json({ success: false, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –≥–æ—Ç–æ–≤' });
        }

        if (!phoneNumbers || !Array.isArray(phoneNumbers) || phoneNumbers.length === 0) {
            return res.json({ success: false, message: '–°–ø–∏—Å–æ–∫ –Ω–æ–º–µ—Ä–æ–≤ –ø—É—Å—Ç' });
        }

        const messageText = message || 'üéâ –ú–∞—Å—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ! –≠—Ç–æ —Ç–µ—Å—Ç —Å–∏—Å—Ç–µ–º—ã —Ä–∞—Å—Å—ã–ª–∫–∏.';
        const delayMs = parseInt(delay) || 5000;
        const messagesPerNumber = parseInt(maxMessages) || 1; // –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä
        
        let sentCount = 0;
        let failedCount = 0;
        let totalMessagesSent = 0;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏
        isMassSending = true;

        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –∫–∞–∂–¥—ã–π –Ω–æ–º–µ—Ä
        for (let i = 0; i < phoneNumbers.length; i++) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
            if (!isMassSending) {
                logger.info('–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                break;
            }
            
            const phoneNumber = phoneNumbers[i];
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –Ω–æ–º–µ—Ä
            for (let j = 0; j < messagesPerNumber; j++) {
                // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –±—ã–ª–∞ –ª–∏ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ —Ä–∞—Å—Å—ã–ª–∫–∞
                if (!isMassSending) {
                    logger.info('–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º');
                    break;
                }
                
                try {
                    let success;
                    if (attachmentPath && attachmentPath.trim()) {
                        logger.info(`–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ ${j + 1}/${messagesPerNumber} —Å –≤–ª–æ–∂–µ–Ω–∏–µ–º: ${attachmentPath} –Ω–∞ ${phoneNumber}`);
                        success = await whatsappClient.sendMessage(phoneNumber, messageText, attachmentPath);
                    } else {
                        logger.info(`–û—Ç–ø—Ä–∞–≤–ª—è—é —Å–æ–æ–±—â–µ–Ω–∏–µ ${j + 1}/${messagesPerNumber} –±–µ–∑ –≤–ª–æ–∂–µ–Ω–∏—è –Ω–∞ ${phoneNumber}`);
                        success = await whatsappClient.sendMessage(phoneNumber, messageText);
                    }
                    
                    if (success) {
                        sentCount++;
                        totalMessagesSent++;
                    } else {
                        failedCount++;
                    }
                } catch (error) {
                    failedCount++;
                    logger.error(`–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è ${j + 1}/${messagesPerNumber} –Ω–∞ ${phoneNumber}:`, error);
                }

                // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏ –Ω–∞ –æ–¥–∏–Ω –Ω–æ–º–µ—Ä (–µ—Å–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ)
                if (j < messagesPerNumber - 1 && isMassSending) {
                    await new Promise(resolve => setTimeout(resolve, delayMs));
                }
            }

            // –ó–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –Ω–æ–º–µ—Ä–∞–º–∏
            if (i < phoneNumbers.length - 1 && isMassSending) {
                await new Promise(resolve => setTimeout(resolve, delayMs));
            }
        }

        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —Ä–∞—Å—Å—ã–ª–∫–∏
        isMassSending = false;

        res.json({ 
            success: true, 
            message: `–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${totalMessagesSent} —Å–æ–æ–±—â–µ–Ω–∏–π, –û—à–∏–±–æ–∫: ${failedCount}, –ù–æ–º–µ—Ä–æ–≤: ${phoneNumbers.length}, –°–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ –Ω–æ–º–µ—Ä: ${messagesPerNumber}`,
            stats: { 
                messagesSent: totalMessagesSent, 
                failed: failedCount, 
                phoneNumbers: phoneNumbers.length, 
                messagesPerNumber: messagesPerNumber 
            }
        });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞: ' + error.message });
    }
});

// Upload attachment file
app.post('/api/upload-attachment', uploadAttachment.single('file'), async (req, res) => {
    try {
        if (!req.file) {
            return res.json({ success: false, message: '–§–∞–π–ª –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω' });
        }

        const filePath = req.file.path;
        const fileName = req.file.originalname;
        const fileSize = req.file.size;
        const fileType = req.file.mimetype;

        // Check file size (WhatsApp limit is 16MB)
        const maxSize = 16 * 1024 * 1024; // 16MB
        if (fileSize > maxSize) {
            // Clean up file
            fs.unlinkSync(filePath);
            return res.json({ success: false, message: '–§–∞–π–ª —Å–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π. –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä: 16MB' });
        }

        // Check if file type is supported by WhatsApp
        const supportedTypes = [
            'image/jpeg', 'image/png', 'image/gif', 'image/webp',
            'video/mp4', 'video/avi', 'video/mov', 'video/wmv',
            'audio/mp3', 'audio/wav', 'audio/ogg', 'audio/m4a',
            'application/pdf', 'application/msword', 
            'application/vnd.openxmlformats-officedocument.wordprocessingml.document',
            'application/vnd.ms-excel',
            'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',
            'text/plain'
        ];

        if (!supportedTypes.includes(fileType)) {
            // Clean up file
            fs.unlinkSync(filePath);
            return res.json({ success: false, message: '–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Ñ–∞–π–ª–∞ –¥–ª—è WhatsApp' });
        }

        logger.info(`–í–ª–æ–∂–µ–Ω–∏–µ –∑–∞–≥—Ä—É–∂–µ–Ω–æ: ${fileName}, –ø—É—Ç—å: ${filePath}, —Ä–∞–∑–º–µ—Ä: ${fileSize} –±–∞–π—Ç, —Ç–∏–ø: ${fileType}`);
        
        res.json({ 
            success: true, 
            message: `–§–∞–π–ª "${fileName}" –∑–∞–≥—Ä—É–∂–µ–Ω —É—Å–ø–µ—à–Ω–æ`,
            filePath: filePath,
            fileName: fileName,
            fileSize: fileSize,
            fileType: fileType
        });

    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–ª–æ–∂–µ–Ω–∏—è:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞: ' + error.message });
    }
});

// Stop mass sending
app.post('/api/stop-mass', (req, res) => {
    try {
        isMassSending = false;
        res.json({ success: true, message: '–ú–∞—Å—Å–æ–≤–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–∞—Å—Å—ã–ª–∫–∏' });
    }
});

// Stop test sending
app.post('/api/stop-test', (req, res) => {
    try {
        isTestSending = false;
        res.json({ success: true, message: '–¢–µ—Å—Ç–æ–≤–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞' });
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–µ—Å—Ç–∞' });
    }
});

// Close WhatsApp client
app.post('/api/close', async (req, res) => {
    try {
        if (whatsappClient) {
            await whatsappClient.close();
            whatsappClient = null;
            isInitialized = false;
            res.json({ success: true, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –∑–∞–∫—Ä—ã—Ç' });
        } else {
            res.json({ success: false, message: 'WhatsApp –∫–ª–∏–µ–Ω—Ç –Ω–µ –±—ã–ª –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω' });
        }
    } catch (error) {
        logger.error('–û—à–∏–±–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∏–µ–Ω—Ç–∞:', error);
        res.json({ success: false, message: '–û—à–∏–±–∫–∞: ' + error.message });
    }
});

// Start server
app.listen(PORT, () => {
    logger.info(`üöÄ –í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
    logger.info(`üì± –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:${PORT} –≤ –±—Ä–∞—É–∑–µ—Ä–µ`);
});

module.exports = app;
